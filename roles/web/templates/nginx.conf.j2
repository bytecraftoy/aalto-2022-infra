user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    sendfile on;
    tcp_nopush on;
    server_tokens off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format json_analytics escape=json '{'
        '"args": "$args", ' # args
        '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
        '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
        '"connection": "$connection", ' # connection serial number
        '"connection_requests": "$connection_requests", ' # number of requests made in connection
        '"http_host": "$http_host", ' # the request Host: header
        '"http_referer": "$http_referer", ' # HTTP referer
        '"http_user_agent": "$http_user_agent", ' # user agent
        '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
        '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
        '"pid": "$pid", ' # process pid
        '"remote_addr": "$remote_addr", ' # client IP
        '"remote_port": "$remote_port", ' # client port
        '"remote_user": "$remote_user", ' # client HTTP username
        '"request": "$request", ' # full path no arguments if the request
        '"request_id": "$request_id", ' # the unique request id
        '"request_length": "$request_length", ' # request length (including headers and body)
        '"request_method": "$request_method", ' # request method
        '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
        '"request_uri": "$request_uri", ' # full path and arguments if the request
        '"scheme": "$scheme", ' # http or https
        '"server_name": "$server_name", ' # the name of the vhost serving the request
        '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
        '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
        '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
        '"status": "$status", ' # response status code
        '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
        '"time_local": "$time_local", '
        '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
        '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
        '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
        '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
        '"upstream_response_length": "$upstream_response_length", ' # upstream response length
        '"upstream_response_time": "$upstream_response_time"' # time spend receiving upstream body
    '}';

    access_log /var/log/nginx/access.json json_analytics;
    error_log /var/log/nginx/error.log;

    upstream backend {
        server 127.0.0.1:3030;
    }

    # this is required to proxy Grafana Live WebSocket connections.
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    upstream grafana {
        server 127.0.0.1:3000;
    }

    # not needed for now
    #include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
