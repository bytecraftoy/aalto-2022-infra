- name: Install NGINX
  ansible.builtin.include_role:
    name: nginxinc.nginx
  vars:
    nginx_service_modify: true
    nginx_service_timeout: 95
    nginx_logrotate_conf_enable: true
    nginx_logrotate_conf:
      paths:
        - /var/log/nginx/*.log
        - /var/log/nginx/*.json
      options:
        - daily
        - missingok
        - rotate 14
        - compress
        - delaycompress
        - notifempty
        - sharedscriptsgg

- name: Check if NGINX is installed
  ansible.builtin.package:
    name: nginx
    state: present
  check_mode: true
  register: install
  failed_when: (install is changed) or (install is failed)

- name: Check if NGINX service is running
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true
  check_mode: true
  register: service
  failed_when: (service is changed) or (service is failed)

- name: Verify NGINX is up and running
  ansible.builtin.uri:
    url: http://localhost
    follow_redirects: none
    status_code: 301

- name: Create NGINX site directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  with_items:
    - /etc/nginx/sites-enabled
    - /etc/nginx/sites-available

- name: Configure NGINX
  block:
    - name: Copy backend site config
      ansible.builtin.template:
        src: backend.j2
        dest: /etc/nginx/sites-available/backend
        mode: "644"
        backup: true
      register: conf_backend
      notify: Reload NGINX

    - name: Create symlink from backend to default site
      ansible.builtin.file:
        src: /etc/nginx/sites-available/backend
        dest: /etc/nginx/sites-enabled/default
        state: link

    - name: Copy NGINX main config
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        mode: "644"
        backup: true
      register: conf_main
      notify: Reload NGINX

    - name: Validate NGINX config
      ansible.builtin.command: nginx -t
      changed_when: false

  rescue:
    - name: Restore backend config
      ansible.builtin.copy:
        remote_src: true
        src: "{{ conf_backend['backup_file'] }}"
        dest: /etc/nginx/sites-available/backend
        mode: "644"

    - name: Restore main config
      ansible.builtin.copy:
        remote_src: true
        src: "{{ conf_main['backup_file'] }}"
        dest: /etc/nginx/nginx.conf
        mode: "644"

    - name: Re-raise the error
      fail:
        msg: "{{ ansible_failed_result }}"

  always:
    - name: Delete backend backup
      ansible.builtin.file:
        path: "{{ conf_backend['backup_file'] }}"
        state: absent
      when: (not ansible_check_mode) and (conf_backend.changed)

    - name: Delete main backup
      ansible.builtin.file:
        path: "{{ conf_main['backup_file'] }}"
        state: absent
      when: (not ansible_check_mode) and (conf_main.changed)

- name: Open up TCP ports 80 and 443
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 80
    - 443
  tags: firewall
